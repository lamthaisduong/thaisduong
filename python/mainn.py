import streamlit as st
import random
import time

USER = "admin"
PASS = "123456"
MIN_BET = 10

if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
if "balance" not in st.session_state:
    st.session_state.balance = 0
if "show_overlay" not in st.session_state:
    st.session_state.show_overlay = False

def set_animated_background():
    st.markdown(
        """
        <style>
        .stApp {
            background: linear-gradient(270deg, #0f2027, #2c5364, #00c3ff, #ffff1c, #ff6a00, #ff0084, #33001b, #0f2027);
            background-size: 1600% 1600%;
            animation: gradientBG 30s ease-in-out infinite;
            min-height: 100vh;
        }
        @keyframes gradientBG {
            0% {background-position: 0% 50%;}
            25% {background-position: 50% 100%;}
            50% {background-position: 100% 50%;}
            75% {background-position: 50% 0%;}
            100% {background-position: 0% 50%;}
        }
        .main-content {
            background: rgba(20,24,40,0.82);
            border-radius: 22px;
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.25);
            padding: 2.5rem 2rem 2rem 2rem;
            margin: 2.5rem auto;
            max-width: 500px;
            backdrop-filter: blur(8px);
            -webkit-backdrop-filter: blur(8px);
        }
        </style>
        """,
        unsafe_allow_html=True
    )

def show_dice_overlay(dice, text=""):
    st.markdown(
        f"""
        <style>
        .dice-overlay {{
            position: fixed;
            top: 0; left: 0; width: 100vw; height: 100vh;
            background: rgba(0,0,0,0.75);
            z-index: 99999;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }}
        .dice-big {{
            font-size: 9rem;
            color: #ffe600;
            text-shadow: 0 4px 32px #000, 0 0 24px #00c3ff, 0 0 48px #ff0084;
            margin-bottom: 2.5rem;
        }}
        .dice-text {{
            font-size: 2.5rem;
            color: #fff;
            text-shadow: 0 2px 8px #000;
        }}
        </style>
        <div class="dice-overlay">
            <div class="dice-big">üé≤ {dice[0]}, {dice[1]}, {dice[2]}</div>
            <div class="dice-text">{text}</div>
        </div>
        """,
        unsafe_allow_html=True
    )

def login():
    set_animated_background()
    st.markdown('<div class="main-content">', unsafe_allow_html=True)
    st.markdown("<h1 style='text-align:center; color:#ffe600; letter-spacing:2px; text-shadow:0 2px 12px #00c3ff;'>üé∞ BET 888</h1>", unsafe_allow_html=True)
    username = st.text_input("T√™n ƒëƒÉng nh·∫≠p")
    password = st.text_input("M·∫≠t kh·∫©u", type="password")
    if st.button("ƒêƒÉng nh·∫≠p"):
        if username == USER and password == PASS:
            st.session_state.logged_in = True
            st.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
        else:
            st.error("Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u.")
    st.markdown('</div>', unsafe_allow_html=True)

def logout():
    if st.button("ƒêƒÉng xu·∫•t"):
        st.session_state.logged_in = False
        st.session_state.balance = 0
        st.success("ƒê√£ ƒëƒÉng xu·∫•t.")

def recharge():
    st.subheader("üí∞ N·∫°p ti·ªÅn v√†o t√†i kho·∫£n")
    amount = st.number_input("Nh·∫≠p s·ªë ti·ªÅn mu·ªën n·∫°p", min_value=MIN_BET, max_value=1000000, value=100, step=10)
    if st.button("N·∫°p ti·ªÅn"):
        st.session_state.balance += amount
        st.success(f"ƒê√£ n·∫°p {amount} VNƒê. S·ªë d∆∞ hi·ªán t·∫°i: {st.session_state.balance} VNƒê")

def tai_xiu_game():
    set_animated_background()
    st.markdown('<div class="main-content">', unsafe_allow_html=True)
    st.markdown("<h1 style='text-align:center; color:#ffe600; letter-spacing:2px; text-shadow:0 2px 12px #00c3ff;'>üé∞ BET 888</h1>", unsafe_allow_html=True)
    st.write(f"S·ªë d∆∞ hi·ªán t·∫°i: **{st.session_state.balance} VNƒê**")
    recharge()
    st.markdown("---")
    if st.session_state.balance < MIN_BET:
        st.warning(f"S·ªë d∆∞ c·ªßa b·∫°n nh·ªè h∆°n m·ª©c c∆∞·ª£c t·ªëi thi·ªÉu ({MIN_BET} VNƒê). Vui l√≤ng n·∫°p th√™m ti·ªÅn ƒë·ªÉ ch∆°i.")
        logout()
        st.markdown('</div>', unsafe_allow_html=True)
        return

    st.write("Ch·ªçn s·ªë ti·ªÅn c∆∞·ª£c v√† d·ª± ƒëo√°n k·∫øt qu·∫£:")
    bet = st.number_input(
        "S·ªë ti·ªÅn c∆∞·ª£c",
        min_value=MIN_BET,
        max_value=st.session_state.balance,
        value=MIN_BET,
        step=10,
        key="bet_input"
    )
    choice = st.radio("B·∫°n ch·ªçn:", ("T√†i (11-17)", "X·ªâu (4-10)"))
    roll_btn = st.button("L·∫Øc x√∫c x·∫Øc")

    result_placeholder = st.empty()

    if roll_btn:
        st.session_state.show_overlay = True
        # Hi·ªáu ·ª©ng x√∫c x·∫Øc to ph·ªß m√†n h√¨nh
        for i in range(10):
            dice = [random.randint(1, 6) for _ in range(3)]
            show_dice_overlay(dice, "ƒêang l·∫Øc...")
            time.sleep(0.13)
        dice = [random.randint(1, 6) for _ in range(3)]
        total = sum(dice)
        show_dice_overlay(dice, f"K·∫øt qu·∫£: T·ªïng = {total}")
        time.sleep(1.2)
        st.session_state.show_overlay = False

        # T·ªâ l·ªá th·∫Øng 20%
        win_chance = random.randint(1, 100)
        if win_chance <= 20:
            # Ng∆∞·ªùi ch∆°i th·∫Øng
            if choice == "T√†i (11-17)":
                result = "T√†i"
            else:
                result = "X·ªâu"
        else:
            # Ng∆∞·ªùi ch∆°i thua
            if choice == "T√†i (11-17)":
                result = "X·ªâu"
            else:
                result = "T√†i"

        result_placeholder.write(f"K·∫øt qu·∫£: **{result}**")
        if result in choice:
            st.session_state.balance += bet
            st.success(f"B·∫°n th·∫Øng! Nh·∫≠n {bet} VNƒê. S·ªë d∆∞: {st.session_state.balance} VNƒê")
        else:
            st.session_state.balance -= bet
            st.error(f"B·∫°n thua! M·∫•t {bet} VNƒê. S·ªë d∆∞: {st.session_state.balance} VNƒê")
    else:
        st.session_state.show_overlay = False

    logout()
    st.info("ƒê√¢y ch·ªâ l√† game m√¥ ph·ªèng, kh√¥ng d√πng cho m·ª•c ƒë√≠ch c√° c∆∞·ª£c th·ª±c t·∫ø.")
    st.markdown('</div>', unsafe_allow_html=True)

    # Hi·ªÉn th·ªã overlay n·∫øu ƒëang l·∫Øc
    if st.session_state.show_overlay:
        show_dice_overlay([random.randint(1, 6) for _ in range(3)], "ƒêang l·∫Øc...")

if not st.session_state.logged_in:
    login()
else:
    tai_xiu_game()
